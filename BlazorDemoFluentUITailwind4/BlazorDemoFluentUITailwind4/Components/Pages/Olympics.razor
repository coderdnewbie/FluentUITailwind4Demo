@page "/olympics"
@rendermode InteractiveServer

<PageTitle>Olympics Demo</PageTitle>

<FluentCard Style="height: 490px" Class="mt-4">
    <div style="display: table; table-layout: fixed; width: 100%;">
        <div style="overflow-x:auto; display:flex;">
            <FluentDataGrid Style="min-width: max-content;"
                            Items="@FilteredItems"
                            ResizableColumns=true
                            ResizeType="DataGridResizeType.Discrete"
                            GridTemplateColumns="0.3fr 1fr 0.2fr 0.2fr 0.2fr 0.2fr"
                            Pagination="@pagination"
                            RowClass="@rowClass"
                            RowStyle="@rowStyle"
                            HeaderCellAsButtonWithMenu="true"
                            ColumnResizeLabels="@customLabels">
                <TemplateColumn Tooltip="true" TooltipText="@(c => "Flag of " + c.Name)" Title="Rank" SortBy="@rankSort" Align="Align.Center" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn=true>
                    <img class="flag" src="/flags/@(context.Code).svg" alt="Flag of @(context.Code)" />
                </TemplateColumn>
                <PropertyColumn Property="@(c => c.Name)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(nameFilter)" Tooltip="true" Title="Name of the country">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @bind-Value:after="HandleClear" Placeholder="Country name..." Style="width: 100%;" Label="Filter" />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(c => c.Medals.Gold)" Sortable="true" Align="Align.Start" Tooltip="true" TooltipText="@(c => "That is " + c.Medals.Gold + " x GOLD!!")" />
                <PropertyColumn Property="@(c => c.Medals.Silver)" Sortable="true" Align="Align.Center" Tooltip="true" />
                <PropertyColumn Property="@(c => c.Medals.Bronze)" Sortable="false" Align="Align.End" />
                <PropertyColumn Property="@(c => c.Medals.Total)" Sortable="true" Filtered="@(minMedals != 0 || maxMedals != 130)" Align="Align.End" Tooltip="true">
                    <ColumnOptions>
                        <div style="width: 100%; height: 150px;">
                            <FluentSlider Label="@($"Min ({minMedals})")" Min="0" Max="150" Step="1" Orientation="Orientation.Horizontal" @bind-Value=minMedals Immediate="true" Style="width: 100%;">
                                <FluentSliderLabel Position="0">0</FluentSliderLabel>
                                <FluentSliderLabel Position="50">50</FluentSliderLabel>
                                <FluentSliderLabel Position="100">100</FluentSliderLabel>
                                <FluentSliderLabel Position="150">150</FluentSliderLabel>
                            </FluentSlider>
                            <br /><br />
                            <FluentSlider Label="@($"Max ({maxMedals})")" Min="0" Max="150" Step="1" Orientation="Orientation.Horizontal" @bind-Value=maxMedals Immediate="true" Style="width: 100%;">
                                <FluentSliderLabel Position="0">0</FluentSliderLabel>
                                <FluentSliderLabel Position="50">50</FluentSliderLabel>
                                <FluentSliderLabel Position="100">100</FluentSliderLabel>
                                <FluentSliderLabel Position="150">150</FluentSliderLabel>
                            </FluentSlider>
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
            </FluentDataGrid>
        </div>
    </div>

    <FluentPaginator State="@pagination" />

    <FluentSwitch @bind-Value="@_clearItems"
                  @bind-Value:after="ToggleItemsAsync"
                  UncheckedMessage="&nbsp; Clear all results"
                  CheckedMessage="&nbsp; Restore all results">
    </FluentSwitch>
</FluentCard>

<h4 style="margin-top: 2rem;">Tooltip Demo</h4>

<FluentIcon Id="myFirstButton" Icon="Icons.Regular.Size24.Notepad" />

<FluentTooltip Anchor="myFirstButton" OnDismissed="OnDismiss">
    Hello World <br />
    It is a <i>small</i> tooltip.
</FluentTooltip>

@code {
    bool _clearItems = false;
    IQueryable<Country>? items;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    string nameFilter = string.Empty;
    int minMedals;
    int maxMedals = 130;

    ColumnResizeLabels customLabels = ColumnResizeLabels.Default with { DiscreteLabel = "Width (+/- 10px)", ResetAriaLabel = "Restore" };

    GridSort<Country> rankSort = GridSort<Country>
        .ByDescending(x => x.Medals.Gold)
        .ThenDescending(x => x.Medals.Silver)
        .ThenDescending(x => x.Medals.Bronze);

    Func<Country, string?> rowClass = x => x.Name.StartsWith("N") ? "highlighted-row" : null;
    Func<Country, string?> rowStyle = x => x.Name.StartsWith("Au") ? "background-color: var(--accent-fill-rest); color: var(--fill-color);" : null;

    //IQueryable<Country>? FilteredItems => items?.Where(x => x.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    IQueryable<Country>? FilteredItems
    {
        get
        {
            var result = items?.Where(c => c.Medals.Total <= maxMedals);

            if (result is not null && !string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            if (result is not null && minMedals > 0)
            {
                result = result.Where(c => c.Medals.Total >= minMedals);
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        items = (await GetCountriesAsync()).AsQueryable();
    }

    private void HandleCountryFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private async Task ToggleItemsAsync()
    {
        if (_clearItems)
        {
            items = null;
        }
        else
        {
            items = (await GetCountriesAsync()).AsQueryable();
        }
    }

    public record Medals
    {
        public int Gold { get; init; }
        public int Silver { get; init; }
        public int Bronze { get; init; }

        public int Total => Gold + Silver + Bronze;
    }

    public record Country(string Code, string Name, Medals Medals);

    public Task<Country[]> GetCountriesAsync()
    {
        // In a real application, you'd typically be querying an external data source here.
        // However, since this is a standalone docs site, we'll hardcode the data.
        // The API contract would be the same either way.
        return Task.FromResult(_countries);
    }

    private void OnDismiss()
    {
        Console.WriteLine("Tooltip dismissed!");
    }

    // Content derived from https://www.kaggle.com/datasets/arjunprasadsarkhel/2021-olympics-in-tokyo,
    // which is licensed as https://creativecommons.org/licenses/by-sa/4.0/
    private readonly static Country[] _countries = new[]
    {
    new Country("ar", "Argentina", new Medals { Gold = 0, Silver = 1, Bronze = 2 }),
    new Country("am", "Armenia", new Medals { Gold = 0, Silver = 2, Bronze = 2 }),
    new Country("au", "Australia", new Medals { Gold = 17, Silver = 7, Bronze = 22 }),
    new Country("at", "Austria", new Medals { Gold = 1, Silver = 1, Bronze = 5 }),
    new Country("az", "Azerbaijan", new Medals { Gold = 0, Silver = 3, Bronze = 4 }),
    new Country("bs", "Bahamas", new Medals { Gold = 2, Silver = 0, Bronze = 0 }),
    new Country("bh", "Bahrain", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
    new Country("by", "Belarus", new Medals { Gold = 1, Silver = 3, Bronze = 3 }),
    new Country("be", "Belgium", new Medals { Gold = 3, Silver = 1, Bronze = 3 }),
    new Country("bm", "Bermuda", new Medals { Gold = 1, Silver = 0, Bronze = 0 }),
    new Country("bw", "Botswana", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
    new Country("br", "Brazil", new Medals { Gold = 7, Silver = 6, Bronze = 8 }),
    new Country("bg", "Bulgaria", new Medals { Gold = 3, Silver = 1, Bronze = 2 }),
    new Country("bf", "Burkina Faso", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
    new Country("ca", "Canada", new Medals { Gold = 7, Silver = 6, Bronze = 11 }),
    new Country("tpe", "Chinese Taipei", new Medals { Gold = 2, Silver = 4, Bronze = 6 }),
    new Country("co", "Colombia", new Medals { Gold = 0, Silver = 4, Bronze = 1 }),
    new Country("ci", "Côte d'Ivoire", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
    new Country("hr", "Croatia", new Medals { Gold = 3, Silver = 3, Bronze = 2 }),
    new Country("cu", "Cuba", new Medals { Gold = 7, Silver = 3, Bronze = 5 }),
    new Country("cz", "Czech Republic", new Medals { Gold = 4, Silver = 4, Bronze = 3 }),
    new Country("dk", "Denmark", new Medals { Gold = 3, Silver = 4, Bronze = 4 }),
    new Country("do", "Dominican Republic", new Medals { Gold = 0, Silver = 3, Bronze = 2 }),
    new Country("ec", "Ecuador", new Medals { Gold = 2, Silver = 1, Bronze = 0 }),
    new Country("eg", "Egypt", new Medals { Gold = 1, Silver = 1, Bronze = 4 }),
    new Country("ee", "Estonia", new Medals { Gold = 1, Silver = 0, Bronze = 1 }),
    new Country("et", "Ethiopia", new Medals { Gold = 1, Silver = 1, Bronze = 2 }),
    new Country("fj", "Fiji", new Medals { Gold = 1, Silver = 0, Bronze = 1 }),
    new Country("fi", "Finland", new Medals { Gold = 0, Silver = 0, Bronze = 2 }),
    new Country("fr", "France", new Medals { Gold = 10, Silver = 12, Bronze = 11 }),
    new Country("ge", "Georgia", new Medals { Gold = 2, Silver = 5, Bronze = 1 }),
    new Country("de", "Germany", new Medals { Gold = 10, Silver = 11, Bronze = 16 }),
    new Country("gh", "Ghana", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
    new Country("gb", "Great Britain", new Medals { Gold = 22, Silver = 21, Bronze = 22 }),
    new Country("gr", "Greece", new Medals { Gold = 2, Silver = 1, Bronze = 1 }),
    new Country("gd", "Grenada", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
    new Country("hk", "Hong Kong, China", new Medals { Gold = 1, Silver = 2, Bronze = 3 }),
    new Country("hu", "Hungary", new Medals { Gold = 6, Silver = 7, Bronze = 7 }),
    new Country("in", "India", new Medals { Gold = 1, Silver = 2, Bronze = 4 }),
    new Country("id", "Indonesia", new Medals { Gold = 1, Silver = 1, Bronze = 3 }),
    new Country("ie", "Ireland", new Medals { Gold = 2, Silver = 0, Bronze = 2 }),
    new Country("ir", "Islamic Republic of Iran", new Medals { Gold = 3, Silver = 2, Bronze = 2 }),
    new Country("il", "Israel", new Medals { Gold = 2, Silver = 0, Bronze = 2 }),
    new Country("it", "Italy", new Medals { Gold = 10, Silver = 10, Bronze = 20 }),
    new Country("jm", "Jamaica", new Medals { Gold = 4, Silver = 1, Bronze = 4 }),
    new Country("jp", "Japan", new Medals { Gold = 27, Silver = 14, Bronze = 17 }),
    new Country("jo", "Jordan", new Medals { Gold = 0, Silver = 1, Bronze = 1 }),
    new Country("kz", "Kazakhstan", new Medals { Gold = 0, Silver = 0, Bronze = 8 }),
    new Country("ke", "Kenya", new Medals { Gold = 4, Silver = 4, Bronze = 2 }),
    new Country("xk", "Kosovo", new Medals { Gold = 2, Silver = 0, Bronze = 0 }),
    new Country("kw", "Kuwait", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
    new Country("kg", "Kyrgyzstan", new Medals { Gold = 0, Silver = 2, Bronze = 1 }),
    new Country("lv", "Latvia", new Medals { Gold = 1, Silver = 0, Bronze = 1 }),
    new Country("lt", "Lithuania", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
    new Country("my", "Malaysia", new Medals { Gold = 0, Silver = 1, Bronze = 1 }),
    new Country("mx", "Mexico", new Medals { Gold = 0, Silver = 0, Bronze = 4 }),
    new Country("mn", "Mongolia", new Medals { Gold = 0, Silver = 1, Bronze = 3 }),
    new Country("ma", "Morocco", new Medals { Gold = 1, Silver = 0, Bronze = 0 }),
    new Country("na", "Namibia", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
    new Country("nl", "Netherlands", new Medals { Gold = 10, Silver = 12, Bronze = 14 }),
    new Country("nz", "New Zealand", new Medals { Gold = 7, Silver = 6, Bronze = 7 }),
    new Country("ng", "Nigeria", new Medals { Gold = 0, Silver = 1, Bronze = 1 }),
    new Country("mk", "North Macedonia", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
    new Country("no", "Norway", new Medals { Gold = 4, Silver = 2, Bronze = 2 }),
    new Country("cn", "People's Republic of China", new Medals { Gold = 38, Silver = 32, Bronze = 18 }),
    new Country("ph", "Philippines", new Medals { Gold = 1, Silver = 2, Bronze = 1 }),
    new Country("pl", "Poland", new Medals { Gold = 4, Silver = 5, Bronze = 5 }),
    new Country("pt", "Portugal", new Medals { Gold = 1, Silver = 1, Bronze = 2 }),
    new Country("pr", "Puerto Rico", new Medals { Gold = 1, Silver = 0, Bronze = 0 }),
    new Country("qa", "Qatar", new Medals { Gold = 2, Silver = 0, Bronze = 1 }),
    new Country("kr", "Republic of Korea", new Medals { Gold = 6, Silver = 4, Bronze = 10 }),
    new Country("md", "Republic of Moldova", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
    new Country("roc", "ROC", new Medals { Gold = 20, Silver = 28, Bronze = 23 }),
    new Country("ro", "Romania", new Medals { Gold = 1, Silver = 3, Bronze = 0 }),
    new Country("sm", "San Marino", new Medals { Gold = 0, Silver = 1, Bronze = 2 }),
    new Country("sa", "Saudi Arabia", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
    new Country("rs", "Serbia", new Medals { Gold = 3, Silver = 1, Bronze = 5 }),
    new Country("sk", "Slovakia", new Medals { Gold = 1, Silver = 2, Bronze = 1 }),
    new Country("si", "Slovenia", new Medals { Gold = 3, Silver = 1, Bronze = 1 }),
    new Country("za", "South Africa", new Medals { Gold = 1, Silver = 2, Bronze = 0 }),
    new Country("es", "Spain", new Medals { Gold = 3, Silver = 8, Bronze = 6 }),
    new Country("se", "Sweden", new Medals { Gold = 3, Silver = 6, Bronze = 0 }),
    new Country("ch", "Switzerland", new Medals { Gold = 3, Silver = 4, Bronze = 6 }),
    new Country("sy", "Syrian Arab Republic", new Medals { Gold = 0, Silver = 0, Bronze = 1 }),
    new Country("th", "Thailand", new Medals { Gold = 1, Silver = 0, Bronze = 1 }),
    new Country("tn", "Tunisia", new Medals { Gold = 1, Silver = 1, Bronze = 0 }),
    new Country("tr", "Turkey", new Medals { Gold = 2, Silver = 2, Bronze = 9 }),
    new Country("tm", "Turkmenistan", new Medals { Gold = 0, Silver = 1, Bronze = 0 }),
    new Country("ug", "Uganda", new Medals { Gold = 2, Silver = 1, Bronze = 1 }),
    new Country("ua", "Ukraine", new Medals { Gold = 1, Silver = 6, Bronze = 12 }),
    new Country("us", "United States of America", new Medals { Gold = 39, Silver = 41, Bronze = 33 }),
    new Country("uz", "Uzbekistan", new Medals { Gold = 3, Silver = 0, Bronze = 2 }),
    new Country("ve", "Venezuela", new Medals { Gold = 1, Silver = 3, Bronze = 0 }),
};

}
