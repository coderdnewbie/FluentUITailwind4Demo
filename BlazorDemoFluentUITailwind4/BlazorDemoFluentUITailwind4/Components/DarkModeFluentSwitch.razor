@rendermode @(new InteractiveServerRenderMode(prerender: false))

<FluentDesignTheme @bind-Mode="@Mode"
                   @bind-OfficeColor="@OfficeColor"
                   OnLoaded="@OnLoaded"
                   OnLuminanceChanged="@OnLuminanceChanged"
                   StorageName="theme" />

<FluentButton BackgroundColor="var(--accent-fill-stealth)" OnClick="@SwitchTheme" Title="Theme Settings">
    @ThemeSettingsIcon()
</FluentButton>

@code {

    [CascadingParameter]
    public MainLayout mainLayout { get; set; } = default!;

    public DesignThemeModes Mode { get; set; }

    public OfficeColor? OfficeColor { get; set; }

    private bool _isDark = false;
    
    private RenderFragment ThemeSettingsIcon() =>
        @<FluentIcon Value="@(new Icons.Regular.Size20.DarkTheme())" Color="Color.Lightweight" Title="Theme Mode" />;

    void OnLoaded(LoadedEventArgs e)
    {
        IsDark = e.IsDark;
    }

    void OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        mainLayout.UpdateDarkMode(e.IsDark);
    }

    public bool IsDark
    {
        get => _isDark = (Mode == DesignThemeModes.Dark) ? true : false;
        set
        {
            _isDark = value;
            Mode = _isDark ? DesignThemeModes.Dark : DesignThemeModes.Light;
        }
    }

    private void SwitchTheme()
    {
        Mode = Mode != DesignThemeModes.Dark ? DesignThemeModes.Dark : DesignThemeModes.Light;
    }
}